"""
Django settings for myproj project.

Generated by 'django-admin startproject' using Django 3.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os
from django.utils.translation import gettext_lazy as _

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR is your Django project directory. The same directory where 
# manage.py is located
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-@9xz^m!z)j9tbv+t24aemh*l6dbwzj9=_20vx406b(2y7zlsq)'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# ALLOWED_HOSTS = ['9680aed90292.ngrok.io']


# Application definition

INSTALLED_APPS = [
    'users',
    'countries',
    'rest_framework',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rosetta',
]

# a project level locale folder also exists but we have no need to define it here
LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'users', 'locale'),
    os.path.join(BASE_DIR, 'countries', 'locale'),
]

# this is necessary for the custom user model and must to be taken into account before any migration will occur. 
AUTH_USER_MODEL = 'users.User'
"""
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "myproj.middleware.APIResponseMiddleware"
    
]
"""
ROOT_URLCONF = 'myproj.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'myproj.context_processors.firebase_config',
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'myproj.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': "inventario",
        'USER': 'admin',
        'PASSWORD': 'Pa55w0rd',
        'HOST': '127.0.0.1',
        'PORT': '5432',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en'

LANGUAGES = [
  ('en', _('English')),
  ('fr', _('French')),
  ('es', _('Spanish')),
  ('pt', _('Portuguese')),
]

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',  
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Configuraci贸n adicional para CSRF
CSRF_USE_SESSIONS = False  # Usar cookies en lugar de sesi贸n
CSRF_COOKIE_HTTPONLY = False  # Permitir acceso desde JavaScript
CSRF_COOKIE_SECURE = False  # True en producci贸n con HTTPS
CSRF_COOKIE_SAMESITE = 'Lax'  # Buen equilibrio entre seguridad y usabilidad

# necessary to define a static folder inside the main application
#STATIC_DIR = os.path.join(BASE_DIR, 'static')

# Here, I defined several sources for static files, a general one, defined 
# at project level and an application specific one.

STATICFILES_DIRS = [
    # Django will looks automatically in myapp/static, so no need to define it 
    # here. All static folders in the applications defined in INSTALLED_APPS 
    # will be scanned. But the application specific style was eliminated for 
    # this project. 
    'myproj/static/',
]
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# Necessary for static files to work
STATIC_URL = '/static/'

# A LIST OF STATIC DIRECTORIES, IN CASE WE NEED A GENERAL STATIC DIR OUTSIDE
# A GIVEN APP

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Redirections
LOGIN_URL = ''
LOGIN_REDIRECT_URL = "home"
LOGOUT_REDIRECT_URL = "login"


# for testing in the console
"""
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_HOST = 'localhost'
EMAIL_PORT = 1025
"""
#Logs in the console
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters":{
        "verbose":{
            "format": "{levelname} {asctime} {module} {message}",
            "style": "{",
            },
        },
    "handlers": {
        "console": {
            "class" : "logging.StreamHandler",
            "formatter" : "verbose",
        },
    },
    "loggers": {
        "django": {
            "handlers" : ["console"],
            "level" : "INFO",
            "propagate" : True,
        },
        "users":{
            "handlers" : ["console"],
            "level" : "DEBUG",
            },
    },
}



# for sending an actual email
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# Email configuration testing, it should be changed in production
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = 'ionecum@gmail.com'
EMAIL_HOST_PASSWORD = 'Xwiit518)'
EMAIL_USE_TLS = True
EMAIL_PORT = 587
#Estos datos dependen de la configuracion que le brinde firebase-console de acuerdo a su proyecto
FCM_API_KEY = "AIzaSyCr8L1nuuQ5rUHywyILYcIf2PIT8F5Cnwo"
FCM_DEVICE_MODEL = 'users.FCMToken' 

FCM_AUTH_DOMAIN = "my-firebase-proyect-13d3e.firebaseapp.com"
FCM_PROJECT_ID = "my-firebase-proyect-13d3e"
FCM_STORAGE_BUCKET = "my-firebase-proyect-13d3e.firebasestorage.app"
FCM_SENDER_ID = "758339320819"  
FCM_APP_ID = "1:758339320819:web:7337bda5a37e976ccfb086"
VAPID_PRIVATE_KEY = "zmj9gtKD8tkIAwhQJd9pFF0W5siZM2wQXO7SaUafkho"
CONTACT_EMAIL = "alextoledo2602@gmail.com"


# Configuraci贸n de notificaciones
PUSH_NOTIFICATIONS_SETTINGS = {
    "FCM_API_KEY": FCM_API_KEY,
    "FCM_MAX_RECIPIENTS": 1000,
    "FCM_ERROR_TIMEOUT": 3600
}

import json
CONFIG_PATH = os.path.join(BASE_DIR, 'etc/config.json')
with open(CONFIG_PATH) as f:
    config = json.load(f)

firebase_config = config['FIREBASE_SECRETS']
vapid_key = config['VAPID_PRIVATE_KEY']